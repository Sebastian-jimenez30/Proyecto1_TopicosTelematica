// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mom.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mom_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mom_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mom_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mom_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mom_2eproto;
namespace mom {
class AccionConToken;
struct AccionConTokenDefaultTypeInternal;
extern AccionConTokenDefaultTypeInternal _AccionConToken_default_instance_;
class AutorizacionColaRequest;
struct AutorizacionColaRequestDefaultTypeInternal;
extern AutorizacionColaRequestDefaultTypeInternal _AutorizacionColaRequest_default_instance_;
class Credenciales;
struct CredencialesDefaultTypeInternal;
extern CredencialesDefaultTypeInternal _Credenciales_default_instance_;
class ListaMensajes;
struct ListaMensajesDefaultTypeInternal;
extern ListaMensajesDefaultTypeInternal _ListaMensajes_default_instance_;
class ListaNombres;
struct ListaNombresDefaultTypeInternal;
extern ListaNombresDefaultTypeInternal _ListaNombres_default_instance_;
class MensajeConToken;
struct MensajeConTokenDefaultTypeInternal;
extern MensajeConTokenDefaultTypeInternal _MensajeConToken_default_instance_;
class MensajeTexto;
struct MensajeTextoDefaultTypeInternal;
extern MensajeTextoDefaultTypeInternal _MensajeTexto_default_instance_;
class RespuestaSimple;
struct RespuestaSimpleDefaultTypeInternal;
extern RespuestaSimpleDefaultTypeInternal _RespuestaSimple_default_instance_;
class Token;
struct TokenDefaultTypeInternal;
extern TokenDefaultTypeInternal _Token_default_instance_;
class TokenConExpiracion;
struct TokenConExpiracionDefaultTypeInternal;
extern TokenConExpiracionDefaultTypeInternal _TokenConExpiracion_default_instance_;
}  // namespace mom
PROTOBUF_NAMESPACE_OPEN
template<> ::mom::AccionConToken* Arena::CreateMaybeMessage<::mom::AccionConToken>(Arena*);
template<> ::mom::AutorizacionColaRequest* Arena::CreateMaybeMessage<::mom::AutorizacionColaRequest>(Arena*);
template<> ::mom::Credenciales* Arena::CreateMaybeMessage<::mom::Credenciales>(Arena*);
template<> ::mom::ListaMensajes* Arena::CreateMaybeMessage<::mom::ListaMensajes>(Arena*);
template<> ::mom::ListaNombres* Arena::CreateMaybeMessage<::mom::ListaNombres>(Arena*);
template<> ::mom::MensajeConToken* Arena::CreateMaybeMessage<::mom::MensajeConToken>(Arena*);
template<> ::mom::MensajeTexto* Arena::CreateMaybeMessage<::mom::MensajeTexto>(Arena*);
template<> ::mom::RespuestaSimple* Arena::CreateMaybeMessage<::mom::RespuestaSimple>(Arena*);
template<> ::mom::Token* Arena::CreateMaybeMessage<::mom::Token>(Arena*);
template<> ::mom::TokenConExpiracion* Arena::CreateMaybeMessage<::mom::TokenConExpiracion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mom {

// ===================================================================

class Credenciales final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.Credenciales) */ {
 public:
  inline Credenciales() : Credenciales(nullptr) {}
  ~Credenciales() override;
  explicit PROTOBUF_CONSTEXPR Credenciales(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Credenciales(const Credenciales& from);
  Credenciales(Credenciales&& from) noexcept
    : Credenciales() {
    *this = ::std::move(from);
  }

  inline Credenciales& operator=(const Credenciales& from) {
    CopyFrom(from);
    return *this;
  }
  inline Credenciales& operator=(Credenciales&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Credenciales& default_instance() {
    return *internal_default_instance();
  }
  static inline const Credenciales* internal_default_instance() {
    return reinterpret_cast<const Credenciales*>(
               &_Credenciales_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Credenciales& a, Credenciales& b) {
    a.Swap(&b);
  }
  inline void Swap(Credenciales* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Credenciales* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Credenciales* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Credenciales>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Credenciales& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Credenciales& from) {
    Credenciales::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Credenciales* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.Credenciales";
  }
  protected:
  explicit Credenciales(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:mom.Credenciales)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class TokenConExpiracion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.TokenConExpiracion) */ {
 public:
  inline TokenConExpiracion() : TokenConExpiracion(nullptr) {}
  ~TokenConExpiracion() override;
  explicit PROTOBUF_CONSTEXPR TokenConExpiracion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenConExpiracion(const TokenConExpiracion& from);
  TokenConExpiracion(TokenConExpiracion&& from) noexcept
    : TokenConExpiracion() {
    *this = ::std::move(from);
  }

  inline TokenConExpiracion& operator=(const TokenConExpiracion& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenConExpiracion& operator=(TokenConExpiracion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenConExpiracion& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenConExpiracion* internal_default_instance() {
    return reinterpret_cast<const TokenConExpiracion*>(
               &_TokenConExpiracion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TokenConExpiracion& a, TokenConExpiracion& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenConExpiracion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenConExpiracion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenConExpiracion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenConExpiracion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenConExpiracion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TokenConExpiracion& from) {
    TokenConExpiracion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenConExpiracion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.TokenConExpiracion";
  }
  protected:
  explicit TokenConExpiracion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kTokenFieldNumber = 2,
    kExpiracionFieldNumber = 3,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string token = 2;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string expiracion = 3;
  void clear_expiracion();
  const std::string& expiracion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expiracion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expiracion();
  PROTOBUF_NODISCARD std::string* release_expiracion();
  void set_allocated_expiracion(std::string* expiracion);
  private:
  const std::string& _internal_expiracion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expiracion(const std::string& value);
  std::string* _internal_mutable_expiracion();
  public:

  // @@protoc_insertion_point(class_scope:mom.TokenConExpiracion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expiracion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class Token final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.Token) */ {
 public:
  inline Token() : Token(nullptr) {}
  ~Token() override;
  explicit PROTOBUF_CONSTEXPR Token(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Token(const Token& from);
  Token(Token&& from) noexcept
    : Token() {
    *this = ::std::move(from);
  }

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline Token& operator=(Token&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Token& default_instance() {
    return *internal_default_instance();
  }
  static inline const Token* internal_default_instance() {
    return reinterpret_cast<const Token*>(
               &_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Token& a, Token& b) {
    a.Swap(&b);
  }
  inline void Swap(Token* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Token* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Token>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Token& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Token& from) {
    Token::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Token* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.Token";
  }
  protected:
  explicit Token(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:mom.Token)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class AccionConToken final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.AccionConToken) */ {
 public:
  inline AccionConToken() : AccionConToken(nullptr) {}
  ~AccionConToken() override;
  explicit PROTOBUF_CONSTEXPR AccionConToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccionConToken(const AccionConToken& from);
  AccionConToken(AccionConToken&& from) noexcept
    : AccionConToken() {
    *this = ::std::move(from);
  }

  inline AccionConToken& operator=(const AccionConToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccionConToken& operator=(AccionConToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccionConToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccionConToken* internal_default_instance() {
    return reinterpret_cast<const AccionConToken*>(
               &_AccionConToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AccionConToken& a, AccionConToken& b) {
    a.Swap(&b);
  }
  inline void Swap(AccionConToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccionConToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccionConToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccionConToken>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccionConToken& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccionConToken& from) {
    AccionConToken::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccionConToken* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.AccionConToken";
  }
  protected:
  explicit AccionConToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kNombreFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string nombre = 2;
  void clear_nombre();
  const std::string& nombre() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nombre(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nombre();
  PROTOBUF_NODISCARD std::string* release_nombre();
  void set_allocated_nombre(std::string* nombre);
  private:
  const std::string& _internal_nombre() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nombre(const std::string& value);
  std::string* _internal_mutable_nombre();
  public:

  // @@protoc_insertion_point(class_scope:mom.AccionConToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nombre_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class MensajeConToken final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.MensajeConToken) */ {
 public:
  inline MensajeConToken() : MensajeConToken(nullptr) {}
  ~MensajeConToken() override;
  explicit PROTOBUF_CONSTEXPR MensajeConToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MensajeConToken(const MensajeConToken& from);
  MensajeConToken(MensajeConToken&& from) noexcept
    : MensajeConToken() {
    *this = ::std::move(from);
  }

  inline MensajeConToken& operator=(const MensajeConToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline MensajeConToken& operator=(MensajeConToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MensajeConToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const MensajeConToken* internal_default_instance() {
    return reinterpret_cast<const MensajeConToken*>(
               &_MensajeConToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MensajeConToken& a, MensajeConToken& b) {
    a.Swap(&b);
  }
  inline void Swap(MensajeConToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MensajeConToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MensajeConToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MensajeConToken>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MensajeConToken& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MensajeConToken& from) {
    MensajeConToken::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MensajeConToken* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.MensajeConToken";
  }
  protected:
  explicit MensajeConToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kNombreFieldNumber = 2,
    kContenidoFieldNumber = 3,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string nombre = 2;
  void clear_nombre();
  const std::string& nombre() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nombre(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nombre();
  PROTOBUF_NODISCARD std::string* release_nombre();
  void set_allocated_nombre(std::string* nombre);
  private:
  const std::string& _internal_nombre() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nombre(const std::string& value);
  std::string* _internal_mutable_nombre();
  public:

  // string contenido = 3;
  void clear_contenido();
  const std::string& contenido() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contenido(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contenido();
  PROTOBUF_NODISCARD std::string* release_contenido();
  void set_allocated_contenido(std::string* contenido);
  private:
  const std::string& _internal_contenido() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contenido(const std::string& value);
  std::string* _internal_mutable_contenido();
  public:

  // @@protoc_insertion_point(class_scope:mom.MensajeConToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nombre_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contenido_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class AutorizacionColaRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.AutorizacionColaRequest) */ {
 public:
  inline AutorizacionColaRequest() : AutorizacionColaRequest(nullptr) {}
  ~AutorizacionColaRequest() override;
  explicit PROTOBUF_CONSTEXPR AutorizacionColaRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutorizacionColaRequest(const AutorizacionColaRequest& from);
  AutorizacionColaRequest(AutorizacionColaRequest&& from) noexcept
    : AutorizacionColaRequest() {
    *this = ::std::move(from);
  }

  inline AutorizacionColaRequest& operator=(const AutorizacionColaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutorizacionColaRequest& operator=(AutorizacionColaRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutorizacionColaRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutorizacionColaRequest* internal_default_instance() {
    return reinterpret_cast<const AutorizacionColaRequest*>(
               &_AutorizacionColaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AutorizacionColaRequest& a, AutorizacionColaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AutorizacionColaRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutorizacionColaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutorizacionColaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutorizacionColaRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutorizacionColaRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AutorizacionColaRequest& from) {
    AutorizacionColaRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutorizacionColaRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.AutorizacionColaRequest";
  }
  protected:
  explicit AutorizacionColaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kNombreFieldNumber = 2,
    kUsuarioObjetivoFieldNumber = 3,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string nombre = 2;
  void clear_nombre();
  const std::string& nombre() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nombre(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nombre();
  PROTOBUF_NODISCARD std::string* release_nombre();
  void set_allocated_nombre(std::string* nombre);
  private:
  const std::string& _internal_nombre() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nombre(const std::string& value);
  std::string* _internal_mutable_nombre();
  public:

  // string usuarioObjetivo = 3;
  void clear_usuarioobjetivo();
  const std::string& usuarioobjetivo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usuarioobjetivo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usuarioobjetivo();
  PROTOBUF_NODISCARD std::string* release_usuarioobjetivo();
  void set_allocated_usuarioobjetivo(std::string* usuarioobjetivo);
  private:
  const std::string& _internal_usuarioobjetivo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usuarioobjetivo(const std::string& value);
  std::string* _internal_mutable_usuarioobjetivo();
  public:

  // @@protoc_insertion_point(class_scope:mom.AutorizacionColaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nombre_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usuarioobjetivo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class RespuestaSimple final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.RespuestaSimple) */ {
 public:
  inline RespuestaSimple() : RespuestaSimple(nullptr) {}
  ~RespuestaSimple() override;
  explicit PROTOBUF_CONSTEXPR RespuestaSimple(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RespuestaSimple(const RespuestaSimple& from);
  RespuestaSimple(RespuestaSimple&& from) noexcept
    : RespuestaSimple() {
    *this = ::std::move(from);
  }

  inline RespuestaSimple& operator=(const RespuestaSimple& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespuestaSimple& operator=(RespuestaSimple&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RespuestaSimple& default_instance() {
    return *internal_default_instance();
  }
  static inline const RespuestaSimple* internal_default_instance() {
    return reinterpret_cast<const RespuestaSimple*>(
               &_RespuestaSimple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RespuestaSimple& a, RespuestaSimple& b) {
    a.Swap(&b);
  }
  inline void Swap(RespuestaSimple* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespuestaSimple* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RespuestaSimple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RespuestaSimple>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RespuestaSimple& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RespuestaSimple& from) {
    RespuestaSimple::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespuestaSimple* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.RespuestaSimple";
  }
  protected:
  explicit RespuestaSimple(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMensajeFieldNumber = 2,
    kExitoFieldNumber = 1,
  };
  // string mensaje = 2;
  void clear_mensaje();
  const std::string& mensaje() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mensaje(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mensaje();
  PROTOBUF_NODISCARD std::string* release_mensaje();
  void set_allocated_mensaje(std::string* mensaje);
  private:
  const std::string& _internal_mensaje() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mensaje(const std::string& value);
  std::string* _internal_mutable_mensaje();
  public:

  // bool exito = 1;
  void clear_exito();
  bool exito() const;
  void set_exito(bool value);
  private:
  bool _internal_exito() const;
  void _internal_set_exito(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mom.RespuestaSimple)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mensaje_;
    bool exito_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class MensajeTexto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.MensajeTexto) */ {
 public:
  inline MensajeTexto() : MensajeTexto(nullptr) {}
  ~MensajeTexto() override;
  explicit PROTOBUF_CONSTEXPR MensajeTexto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MensajeTexto(const MensajeTexto& from);
  MensajeTexto(MensajeTexto&& from) noexcept
    : MensajeTexto() {
    *this = ::std::move(from);
  }

  inline MensajeTexto& operator=(const MensajeTexto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MensajeTexto& operator=(MensajeTexto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MensajeTexto& default_instance() {
    return *internal_default_instance();
  }
  static inline const MensajeTexto* internal_default_instance() {
    return reinterpret_cast<const MensajeTexto*>(
               &_MensajeTexto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MensajeTexto& a, MensajeTexto& b) {
    a.Swap(&b);
  }
  inline void Swap(MensajeTexto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MensajeTexto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MensajeTexto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MensajeTexto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MensajeTexto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MensajeTexto& from) {
    MensajeTexto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MensajeTexto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.MensajeTexto";
  }
  protected:
  explicit MensajeTexto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContenidoFieldNumber = 1,
    kRemitenteFieldNumber = 2,
    kCanalFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // string contenido = 1;
  void clear_contenido();
  const std::string& contenido() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contenido(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contenido();
  PROTOBUF_NODISCARD std::string* release_contenido();
  void set_allocated_contenido(std::string* contenido);
  private:
  const std::string& _internal_contenido() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contenido(const std::string& value);
  std::string* _internal_mutable_contenido();
  public:

  // string remitente = 2;
  void clear_remitente();
  const std::string& remitente() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remitente(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remitente();
  PROTOBUF_NODISCARD std::string* release_remitente();
  void set_allocated_remitente(std::string* remitente);
  private:
  const std::string& _internal_remitente() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remitente(const std::string& value);
  std::string* _internal_mutable_remitente();
  public:

  // string canal = 3;
  void clear_canal();
  const std::string& canal() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_canal(ArgT0&& arg0, ArgT... args);
  std::string* mutable_canal();
  PROTOBUF_NODISCARD std::string* release_canal();
  void set_allocated_canal(std::string* canal);
  private:
  const std::string& _internal_canal() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_canal(const std::string& value);
  std::string* _internal_mutable_canal();
  public:

  // string timestamp = 4;
  void clear_timestamp();
  const std::string& timestamp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timestamp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // @@protoc_insertion_point(class_scope:mom.MensajeTexto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contenido_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remitente_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr canal_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class ListaMensajes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.ListaMensajes) */ {
 public:
  inline ListaMensajes() : ListaMensajes(nullptr) {}
  ~ListaMensajes() override;
  explicit PROTOBUF_CONSTEXPR ListaMensajes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListaMensajes(const ListaMensajes& from);
  ListaMensajes(ListaMensajes&& from) noexcept
    : ListaMensajes() {
    *this = ::std::move(from);
  }

  inline ListaMensajes& operator=(const ListaMensajes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListaMensajes& operator=(ListaMensajes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListaMensajes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListaMensajes* internal_default_instance() {
    return reinterpret_cast<const ListaMensajes*>(
               &_ListaMensajes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListaMensajes& a, ListaMensajes& b) {
    a.Swap(&b);
  }
  inline void Swap(ListaMensajes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListaMensajes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListaMensajes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListaMensajes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListaMensajes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListaMensajes& from) {
    ListaMensajes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListaMensajes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.ListaMensajes";
  }
  protected:
  explicit ListaMensajes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMensajesFieldNumber = 1,
  };
  // repeated .mom.MensajeTexto mensajes = 1;
  int mensajes_size() const;
  private:
  int _internal_mensajes_size() const;
  public:
  void clear_mensajes();
  ::mom::MensajeTexto* mutable_mensajes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::MensajeTexto >*
      mutable_mensajes();
  private:
  const ::mom::MensajeTexto& _internal_mensajes(int index) const;
  ::mom::MensajeTexto* _internal_add_mensajes();
  public:
  const ::mom::MensajeTexto& mensajes(int index) const;
  ::mom::MensajeTexto* add_mensajes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::MensajeTexto >&
      mensajes() const;

  // @@protoc_insertion_point(class_scope:mom.ListaMensajes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::MensajeTexto > mensajes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class ListaNombres final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.ListaNombres) */ {
 public:
  inline ListaNombres() : ListaNombres(nullptr) {}
  ~ListaNombres() override;
  explicit PROTOBUF_CONSTEXPR ListaNombres(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListaNombres(const ListaNombres& from);
  ListaNombres(ListaNombres&& from) noexcept
    : ListaNombres() {
    *this = ::std::move(from);
  }

  inline ListaNombres& operator=(const ListaNombres& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListaNombres& operator=(ListaNombres&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListaNombres& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListaNombres* internal_default_instance() {
    return reinterpret_cast<const ListaNombres*>(
               &_ListaNombres_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListaNombres& a, ListaNombres& b) {
    a.Swap(&b);
  }
  inline void Swap(ListaNombres* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListaNombres* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListaNombres* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListaNombres>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListaNombres& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListaNombres& from) {
    ListaNombres::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListaNombres* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.ListaNombres";
  }
  protected:
  explicit ListaNombres(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNombresFieldNumber = 1,
  };
  // repeated string nombres = 1;
  int nombres_size() const;
  private:
  int _internal_nombres_size() const;
  public:
  void clear_nombres();
  const std::string& nombres(int index) const;
  std::string* mutable_nombres(int index);
  void set_nombres(int index, const std::string& value);
  void set_nombres(int index, std::string&& value);
  void set_nombres(int index, const char* value);
  void set_nombres(int index, const char* value, size_t size);
  std::string* add_nombres();
  void add_nombres(const std::string& value);
  void add_nombres(std::string&& value);
  void add_nombres(const char* value);
  void add_nombres(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& nombres() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_nombres();
  private:
  const std::string& _internal_nombres(int index) const;
  std::string* _internal_add_nombres();
  public:

  // @@protoc_insertion_point(class_scope:mom.ListaNombres)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> nombres_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Credenciales

// string username = 1;
inline void Credenciales::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& Credenciales::username() const {
  // @@protoc_insertion_point(field_get:mom.Credenciales.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Credenciales::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.Credenciales.username)
}
inline std::string* Credenciales::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:mom.Credenciales.username)
  return _s;
}
inline const std::string& Credenciales::_internal_username() const {
  return _impl_.username_.Get();
}
inline void Credenciales::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* Credenciales::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* Credenciales::release_username() {
  // @@protoc_insertion_point(field_release:mom.Credenciales.username)
  return _impl_.username_.Release();
}
inline void Credenciales::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.Credenciales.username)
}

// string password = 2;
inline void Credenciales::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& Credenciales::password() const {
  // @@protoc_insertion_point(field_get:mom.Credenciales.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Credenciales::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.Credenciales.password)
}
inline std::string* Credenciales::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:mom.Credenciales.password)
  return _s;
}
inline const std::string& Credenciales::_internal_password() const {
  return _impl_.password_.Get();
}
inline void Credenciales::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* Credenciales::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* Credenciales::release_password() {
  // @@protoc_insertion_point(field_release:mom.Credenciales.password)
  return _impl_.password_.Release();
}
inline void Credenciales::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.Credenciales.password)
}

// -------------------------------------------------------------------

// TokenConExpiracion

// string username = 1;
inline void TokenConExpiracion::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& TokenConExpiracion::username() const {
  // @@protoc_insertion_point(field_get:mom.TokenConExpiracion.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenConExpiracion::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.TokenConExpiracion.username)
}
inline std::string* TokenConExpiracion::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:mom.TokenConExpiracion.username)
  return _s;
}
inline const std::string& TokenConExpiracion::_internal_username() const {
  return _impl_.username_.Get();
}
inline void TokenConExpiracion::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* TokenConExpiracion::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* TokenConExpiracion::release_username() {
  // @@protoc_insertion_point(field_release:mom.TokenConExpiracion.username)
  return _impl_.username_.Release();
}
inline void TokenConExpiracion::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.TokenConExpiracion.username)
}

// string token = 2;
inline void TokenConExpiracion::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& TokenConExpiracion::token() const {
  // @@protoc_insertion_point(field_get:mom.TokenConExpiracion.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenConExpiracion::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.TokenConExpiracion.token)
}
inline std::string* TokenConExpiracion::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:mom.TokenConExpiracion.token)
  return _s;
}
inline const std::string& TokenConExpiracion::_internal_token() const {
  return _impl_.token_.Get();
}
inline void TokenConExpiracion::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* TokenConExpiracion::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* TokenConExpiracion::release_token() {
  // @@protoc_insertion_point(field_release:mom.TokenConExpiracion.token)
  return _impl_.token_.Release();
}
inline void TokenConExpiracion::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.TokenConExpiracion.token)
}

// string expiracion = 3;
inline void TokenConExpiracion::clear_expiracion() {
  _impl_.expiracion_.ClearToEmpty();
}
inline const std::string& TokenConExpiracion::expiracion() const {
  // @@protoc_insertion_point(field_get:mom.TokenConExpiracion.expiracion)
  return _internal_expiracion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenConExpiracion::set_expiracion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.expiracion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.TokenConExpiracion.expiracion)
}
inline std::string* TokenConExpiracion::mutable_expiracion() {
  std::string* _s = _internal_mutable_expiracion();
  // @@protoc_insertion_point(field_mutable:mom.TokenConExpiracion.expiracion)
  return _s;
}
inline const std::string& TokenConExpiracion::_internal_expiracion() const {
  return _impl_.expiracion_.Get();
}
inline void TokenConExpiracion::_internal_set_expiracion(const std::string& value) {
  
  _impl_.expiracion_.Set(value, GetArenaForAllocation());
}
inline std::string* TokenConExpiracion::_internal_mutable_expiracion() {
  
  return _impl_.expiracion_.Mutable(GetArenaForAllocation());
}
inline std::string* TokenConExpiracion::release_expiracion() {
  // @@protoc_insertion_point(field_release:mom.TokenConExpiracion.expiracion)
  return _impl_.expiracion_.Release();
}
inline void TokenConExpiracion::set_allocated_expiracion(std::string* expiracion) {
  if (expiracion != nullptr) {
    
  } else {
    
  }
  _impl_.expiracion_.SetAllocated(expiracion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.expiracion_.IsDefault()) {
    _impl_.expiracion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.TokenConExpiracion.expiracion)
}

// -------------------------------------------------------------------

// Token

// string token = 1;
inline void Token::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& Token::token() const {
  // @@protoc_insertion_point(field_get:mom.Token.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Token::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.Token.token)
}
inline std::string* Token::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:mom.Token.token)
  return _s;
}
inline const std::string& Token::_internal_token() const {
  return _impl_.token_.Get();
}
inline void Token::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* Token::release_token() {
  // @@protoc_insertion_point(field_release:mom.Token.token)
  return _impl_.token_.Release();
}
inline void Token::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.Token.token)
}

// -------------------------------------------------------------------

// AccionConToken

// string token = 1;
inline void AccionConToken::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& AccionConToken::token() const {
  // @@protoc_insertion_point(field_get:mom.AccionConToken.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccionConToken::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.AccionConToken.token)
}
inline std::string* AccionConToken::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:mom.AccionConToken.token)
  return _s;
}
inline const std::string& AccionConToken::_internal_token() const {
  return _impl_.token_.Get();
}
inline void AccionConToken::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* AccionConToken::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* AccionConToken::release_token() {
  // @@protoc_insertion_point(field_release:mom.AccionConToken.token)
  return _impl_.token_.Release();
}
inline void AccionConToken::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.AccionConToken.token)
}

// string nombre = 2;
inline void AccionConToken::clear_nombre() {
  _impl_.nombre_.ClearToEmpty();
}
inline const std::string& AccionConToken::nombre() const {
  // @@protoc_insertion_point(field_get:mom.AccionConToken.nombre)
  return _internal_nombre();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccionConToken::set_nombre(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nombre_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.AccionConToken.nombre)
}
inline std::string* AccionConToken::mutable_nombre() {
  std::string* _s = _internal_mutable_nombre();
  // @@protoc_insertion_point(field_mutable:mom.AccionConToken.nombre)
  return _s;
}
inline const std::string& AccionConToken::_internal_nombre() const {
  return _impl_.nombre_.Get();
}
inline void AccionConToken::_internal_set_nombre(const std::string& value) {
  
  _impl_.nombre_.Set(value, GetArenaForAllocation());
}
inline std::string* AccionConToken::_internal_mutable_nombre() {
  
  return _impl_.nombre_.Mutable(GetArenaForAllocation());
}
inline std::string* AccionConToken::release_nombre() {
  // @@protoc_insertion_point(field_release:mom.AccionConToken.nombre)
  return _impl_.nombre_.Release();
}
inline void AccionConToken::set_allocated_nombre(std::string* nombre) {
  if (nombre != nullptr) {
    
  } else {
    
  }
  _impl_.nombre_.SetAllocated(nombre, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nombre_.IsDefault()) {
    _impl_.nombre_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.AccionConToken.nombre)
}

// -------------------------------------------------------------------

// MensajeConToken

// string token = 1;
inline void MensajeConToken::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& MensajeConToken::token() const {
  // @@protoc_insertion_point(field_get:mom.MensajeConToken.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MensajeConToken::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.MensajeConToken.token)
}
inline std::string* MensajeConToken::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:mom.MensajeConToken.token)
  return _s;
}
inline const std::string& MensajeConToken::_internal_token() const {
  return _impl_.token_.Get();
}
inline void MensajeConToken::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* MensajeConToken::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* MensajeConToken::release_token() {
  // @@protoc_insertion_point(field_release:mom.MensajeConToken.token)
  return _impl_.token_.Release();
}
inline void MensajeConToken::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.MensajeConToken.token)
}

// string nombre = 2;
inline void MensajeConToken::clear_nombre() {
  _impl_.nombre_.ClearToEmpty();
}
inline const std::string& MensajeConToken::nombre() const {
  // @@protoc_insertion_point(field_get:mom.MensajeConToken.nombre)
  return _internal_nombre();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MensajeConToken::set_nombre(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nombre_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.MensajeConToken.nombre)
}
inline std::string* MensajeConToken::mutable_nombre() {
  std::string* _s = _internal_mutable_nombre();
  // @@protoc_insertion_point(field_mutable:mom.MensajeConToken.nombre)
  return _s;
}
inline const std::string& MensajeConToken::_internal_nombre() const {
  return _impl_.nombre_.Get();
}
inline void MensajeConToken::_internal_set_nombre(const std::string& value) {
  
  _impl_.nombre_.Set(value, GetArenaForAllocation());
}
inline std::string* MensajeConToken::_internal_mutable_nombre() {
  
  return _impl_.nombre_.Mutable(GetArenaForAllocation());
}
inline std::string* MensajeConToken::release_nombre() {
  // @@protoc_insertion_point(field_release:mom.MensajeConToken.nombre)
  return _impl_.nombre_.Release();
}
inline void MensajeConToken::set_allocated_nombre(std::string* nombre) {
  if (nombre != nullptr) {
    
  } else {
    
  }
  _impl_.nombre_.SetAllocated(nombre, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nombre_.IsDefault()) {
    _impl_.nombre_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.MensajeConToken.nombre)
}

// string contenido = 3;
inline void MensajeConToken::clear_contenido() {
  _impl_.contenido_.ClearToEmpty();
}
inline const std::string& MensajeConToken::contenido() const {
  // @@protoc_insertion_point(field_get:mom.MensajeConToken.contenido)
  return _internal_contenido();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MensajeConToken::set_contenido(ArgT0&& arg0, ArgT... args) {
 
 _impl_.contenido_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.MensajeConToken.contenido)
}
inline std::string* MensajeConToken::mutable_contenido() {
  std::string* _s = _internal_mutable_contenido();
  // @@protoc_insertion_point(field_mutable:mom.MensajeConToken.contenido)
  return _s;
}
inline const std::string& MensajeConToken::_internal_contenido() const {
  return _impl_.contenido_.Get();
}
inline void MensajeConToken::_internal_set_contenido(const std::string& value) {
  
  _impl_.contenido_.Set(value, GetArenaForAllocation());
}
inline std::string* MensajeConToken::_internal_mutable_contenido() {
  
  return _impl_.contenido_.Mutable(GetArenaForAllocation());
}
inline std::string* MensajeConToken::release_contenido() {
  // @@protoc_insertion_point(field_release:mom.MensajeConToken.contenido)
  return _impl_.contenido_.Release();
}
inline void MensajeConToken::set_allocated_contenido(std::string* contenido) {
  if (contenido != nullptr) {
    
  } else {
    
  }
  _impl_.contenido_.SetAllocated(contenido, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contenido_.IsDefault()) {
    _impl_.contenido_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.MensajeConToken.contenido)
}

// -------------------------------------------------------------------

// AutorizacionColaRequest

// string token = 1;
inline void AutorizacionColaRequest::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& AutorizacionColaRequest::token() const {
  // @@protoc_insertion_point(field_get:mom.AutorizacionColaRequest.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutorizacionColaRequest::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.AutorizacionColaRequest.token)
}
inline std::string* AutorizacionColaRequest::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:mom.AutorizacionColaRequest.token)
  return _s;
}
inline const std::string& AutorizacionColaRequest::_internal_token() const {
  return _impl_.token_.Get();
}
inline void AutorizacionColaRequest::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* AutorizacionColaRequest::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* AutorizacionColaRequest::release_token() {
  // @@protoc_insertion_point(field_release:mom.AutorizacionColaRequest.token)
  return _impl_.token_.Release();
}
inline void AutorizacionColaRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.AutorizacionColaRequest.token)
}

// string nombre = 2;
inline void AutorizacionColaRequest::clear_nombre() {
  _impl_.nombre_.ClearToEmpty();
}
inline const std::string& AutorizacionColaRequest::nombre() const {
  // @@protoc_insertion_point(field_get:mom.AutorizacionColaRequest.nombre)
  return _internal_nombre();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutorizacionColaRequest::set_nombre(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nombre_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.AutorizacionColaRequest.nombre)
}
inline std::string* AutorizacionColaRequest::mutable_nombre() {
  std::string* _s = _internal_mutable_nombre();
  // @@protoc_insertion_point(field_mutable:mom.AutorizacionColaRequest.nombre)
  return _s;
}
inline const std::string& AutorizacionColaRequest::_internal_nombre() const {
  return _impl_.nombre_.Get();
}
inline void AutorizacionColaRequest::_internal_set_nombre(const std::string& value) {
  
  _impl_.nombre_.Set(value, GetArenaForAllocation());
}
inline std::string* AutorizacionColaRequest::_internal_mutable_nombre() {
  
  return _impl_.nombre_.Mutable(GetArenaForAllocation());
}
inline std::string* AutorizacionColaRequest::release_nombre() {
  // @@protoc_insertion_point(field_release:mom.AutorizacionColaRequest.nombre)
  return _impl_.nombre_.Release();
}
inline void AutorizacionColaRequest::set_allocated_nombre(std::string* nombre) {
  if (nombre != nullptr) {
    
  } else {
    
  }
  _impl_.nombre_.SetAllocated(nombre, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nombre_.IsDefault()) {
    _impl_.nombre_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.AutorizacionColaRequest.nombre)
}

// string usuarioObjetivo = 3;
inline void AutorizacionColaRequest::clear_usuarioobjetivo() {
  _impl_.usuarioobjetivo_.ClearToEmpty();
}
inline const std::string& AutorizacionColaRequest::usuarioobjetivo() const {
  // @@protoc_insertion_point(field_get:mom.AutorizacionColaRequest.usuarioObjetivo)
  return _internal_usuarioobjetivo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutorizacionColaRequest::set_usuarioobjetivo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usuarioobjetivo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.AutorizacionColaRequest.usuarioObjetivo)
}
inline std::string* AutorizacionColaRequest::mutable_usuarioobjetivo() {
  std::string* _s = _internal_mutable_usuarioobjetivo();
  // @@protoc_insertion_point(field_mutable:mom.AutorizacionColaRequest.usuarioObjetivo)
  return _s;
}
inline const std::string& AutorizacionColaRequest::_internal_usuarioobjetivo() const {
  return _impl_.usuarioobjetivo_.Get();
}
inline void AutorizacionColaRequest::_internal_set_usuarioobjetivo(const std::string& value) {
  
  _impl_.usuarioobjetivo_.Set(value, GetArenaForAllocation());
}
inline std::string* AutorizacionColaRequest::_internal_mutable_usuarioobjetivo() {
  
  return _impl_.usuarioobjetivo_.Mutable(GetArenaForAllocation());
}
inline std::string* AutorizacionColaRequest::release_usuarioobjetivo() {
  // @@protoc_insertion_point(field_release:mom.AutorizacionColaRequest.usuarioObjetivo)
  return _impl_.usuarioobjetivo_.Release();
}
inline void AutorizacionColaRequest::set_allocated_usuarioobjetivo(std::string* usuarioobjetivo) {
  if (usuarioobjetivo != nullptr) {
    
  } else {
    
  }
  _impl_.usuarioobjetivo_.SetAllocated(usuarioobjetivo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usuarioobjetivo_.IsDefault()) {
    _impl_.usuarioobjetivo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.AutorizacionColaRequest.usuarioObjetivo)
}

// -------------------------------------------------------------------

// RespuestaSimple

// bool exito = 1;
inline void RespuestaSimple::clear_exito() {
  _impl_.exito_ = false;
}
inline bool RespuestaSimple::_internal_exito() const {
  return _impl_.exito_;
}
inline bool RespuestaSimple::exito() const {
  // @@protoc_insertion_point(field_get:mom.RespuestaSimple.exito)
  return _internal_exito();
}
inline void RespuestaSimple::_internal_set_exito(bool value) {
  
  _impl_.exito_ = value;
}
inline void RespuestaSimple::set_exito(bool value) {
  _internal_set_exito(value);
  // @@protoc_insertion_point(field_set:mom.RespuestaSimple.exito)
}

// string mensaje = 2;
inline void RespuestaSimple::clear_mensaje() {
  _impl_.mensaje_.ClearToEmpty();
}
inline const std::string& RespuestaSimple::mensaje() const {
  // @@protoc_insertion_point(field_get:mom.RespuestaSimple.mensaje)
  return _internal_mensaje();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RespuestaSimple::set_mensaje(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mensaje_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.RespuestaSimple.mensaje)
}
inline std::string* RespuestaSimple::mutable_mensaje() {
  std::string* _s = _internal_mutable_mensaje();
  // @@protoc_insertion_point(field_mutable:mom.RespuestaSimple.mensaje)
  return _s;
}
inline const std::string& RespuestaSimple::_internal_mensaje() const {
  return _impl_.mensaje_.Get();
}
inline void RespuestaSimple::_internal_set_mensaje(const std::string& value) {
  
  _impl_.mensaje_.Set(value, GetArenaForAllocation());
}
inline std::string* RespuestaSimple::_internal_mutable_mensaje() {
  
  return _impl_.mensaje_.Mutable(GetArenaForAllocation());
}
inline std::string* RespuestaSimple::release_mensaje() {
  // @@protoc_insertion_point(field_release:mom.RespuestaSimple.mensaje)
  return _impl_.mensaje_.Release();
}
inline void RespuestaSimple::set_allocated_mensaje(std::string* mensaje) {
  if (mensaje != nullptr) {
    
  } else {
    
  }
  _impl_.mensaje_.SetAllocated(mensaje, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mensaje_.IsDefault()) {
    _impl_.mensaje_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.RespuestaSimple.mensaje)
}

// -------------------------------------------------------------------

// MensajeTexto

// string contenido = 1;
inline void MensajeTexto::clear_contenido() {
  _impl_.contenido_.ClearToEmpty();
}
inline const std::string& MensajeTexto::contenido() const {
  // @@protoc_insertion_point(field_get:mom.MensajeTexto.contenido)
  return _internal_contenido();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MensajeTexto::set_contenido(ArgT0&& arg0, ArgT... args) {
 
 _impl_.contenido_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.MensajeTexto.contenido)
}
inline std::string* MensajeTexto::mutable_contenido() {
  std::string* _s = _internal_mutable_contenido();
  // @@protoc_insertion_point(field_mutable:mom.MensajeTexto.contenido)
  return _s;
}
inline const std::string& MensajeTexto::_internal_contenido() const {
  return _impl_.contenido_.Get();
}
inline void MensajeTexto::_internal_set_contenido(const std::string& value) {
  
  _impl_.contenido_.Set(value, GetArenaForAllocation());
}
inline std::string* MensajeTexto::_internal_mutable_contenido() {
  
  return _impl_.contenido_.Mutable(GetArenaForAllocation());
}
inline std::string* MensajeTexto::release_contenido() {
  // @@protoc_insertion_point(field_release:mom.MensajeTexto.contenido)
  return _impl_.contenido_.Release();
}
inline void MensajeTexto::set_allocated_contenido(std::string* contenido) {
  if (contenido != nullptr) {
    
  } else {
    
  }
  _impl_.contenido_.SetAllocated(contenido, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contenido_.IsDefault()) {
    _impl_.contenido_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.MensajeTexto.contenido)
}

// string remitente = 2;
inline void MensajeTexto::clear_remitente() {
  _impl_.remitente_.ClearToEmpty();
}
inline const std::string& MensajeTexto::remitente() const {
  // @@protoc_insertion_point(field_get:mom.MensajeTexto.remitente)
  return _internal_remitente();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MensajeTexto::set_remitente(ArgT0&& arg0, ArgT... args) {
 
 _impl_.remitente_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.MensajeTexto.remitente)
}
inline std::string* MensajeTexto::mutable_remitente() {
  std::string* _s = _internal_mutable_remitente();
  // @@protoc_insertion_point(field_mutable:mom.MensajeTexto.remitente)
  return _s;
}
inline const std::string& MensajeTexto::_internal_remitente() const {
  return _impl_.remitente_.Get();
}
inline void MensajeTexto::_internal_set_remitente(const std::string& value) {
  
  _impl_.remitente_.Set(value, GetArenaForAllocation());
}
inline std::string* MensajeTexto::_internal_mutable_remitente() {
  
  return _impl_.remitente_.Mutable(GetArenaForAllocation());
}
inline std::string* MensajeTexto::release_remitente() {
  // @@protoc_insertion_point(field_release:mom.MensajeTexto.remitente)
  return _impl_.remitente_.Release();
}
inline void MensajeTexto::set_allocated_remitente(std::string* remitente) {
  if (remitente != nullptr) {
    
  } else {
    
  }
  _impl_.remitente_.SetAllocated(remitente, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.remitente_.IsDefault()) {
    _impl_.remitente_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.MensajeTexto.remitente)
}

// string canal = 3;
inline void MensajeTexto::clear_canal() {
  _impl_.canal_.ClearToEmpty();
}
inline const std::string& MensajeTexto::canal() const {
  // @@protoc_insertion_point(field_get:mom.MensajeTexto.canal)
  return _internal_canal();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MensajeTexto::set_canal(ArgT0&& arg0, ArgT... args) {
 
 _impl_.canal_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.MensajeTexto.canal)
}
inline std::string* MensajeTexto::mutable_canal() {
  std::string* _s = _internal_mutable_canal();
  // @@protoc_insertion_point(field_mutable:mom.MensajeTexto.canal)
  return _s;
}
inline const std::string& MensajeTexto::_internal_canal() const {
  return _impl_.canal_.Get();
}
inline void MensajeTexto::_internal_set_canal(const std::string& value) {
  
  _impl_.canal_.Set(value, GetArenaForAllocation());
}
inline std::string* MensajeTexto::_internal_mutable_canal() {
  
  return _impl_.canal_.Mutable(GetArenaForAllocation());
}
inline std::string* MensajeTexto::release_canal() {
  // @@protoc_insertion_point(field_release:mom.MensajeTexto.canal)
  return _impl_.canal_.Release();
}
inline void MensajeTexto::set_allocated_canal(std::string* canal) {
  if (canal != nullptr) {
    
  } else {
    
  }
  _impl_.canal_.SetAllocated(canal, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.canal_.IsDefault()) {
    _impl_.canal_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.MensajeTexto.canal)
}

// string timestamp = 4;
inline void MensajeTexto::clear_timestamp() {
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& MensajeTexto::timestamp() const {
  // @@protoc_insertion_point(field_get:mom.MensajeTexto.timestamp)
  return _internal_timestamp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MensajeTexto::set_timestamp(ArgT0&& arg0, ArgT... args) {
 
 _impl_.timestamp_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.MensajeTexto.timestamp)
}
inline std::string* MensajeTexto::mutable_timestamp() {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:mom.MensajeTexto.timestamp)
  return _s;
}
inline const std::string& MensajeTexto::_internal_timestamp() const {
  return _impl_.timestamp_.Get();
}
inline void MensajeTexto::_internal_set_timestamp(const std::string& value) {
  
  _impl_.timestamp_.Set(value, GetArenaForAllocation());
}
inline std::string* MensajeTexto::_internal_mutable_timestamp() {
  
  return _impl_.timestamp_.Mutable(GetArenaForAllocation());
}
inline std::string* MensajeTexto::release_timestamp() {
  // @@protoc_insertion_point(field_release:mom.MensajeTexto.timestamp)
  return _impl_.timestamp_.Release();
}
inline void MensajeTexto::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  _impl_.timestamp_.SetAllocated(timestamp, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.MensajeTexto.timestamp)
}

// -------------------------------------------------------------------

// ListaMensajes

// repeated .mom.MensajeTexto mensajes = 1;
inline int ListaMensajes::_internal_mensajes_size() const {
  return _impl_.mensajes_.size();
}
inline int ListaMensajes::mensajes_size() const {
  return _internal_mensajes_size();
}
inline void ListaMensajes::clear_mensajes() {
  _impl_.mensajes_.Clear();
}
inline ::mom::MensajeTexto* ListaMensajes::mutable_mensajes(int index) {
  // @@protoc_insertion_point(field_mutable:mom.ListaMensajes.mensajes)
  return _impl_.mensajes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::MensajeTexto >*
ListaMensajes::mutable_mensajes() {
  // @@protoc_insertion_point(field_mutable_list:mom.ListaMensajes.mensajes)
  return &_impl_.mensajes_;
}
inline const ::mom::MensajeTexto& ListaMensajes::_internal_mensajes(int index) const {
  return _impl_.mensajes_.Get(index);
}
inline const ::mom::MensajeTexto& ListaMensajes::mensajes(int index) const {
  // @@protoc_insertion_point(field_get:mom.ListaMensajes.mensajes)
  return _internal_mensajes(index);
}
inline ::mom::MensajeTexto* ListaMensajes::_internal_add_mensajes() {
  return _impl_.mensajes_.Add();
}
inline ::mom::MensajeTexto* ListaMensajes::add_mensajes() {
  ::mom::MensajeTexto* _add = _internal_add_mensajes();
  // @@protoc_insertion_point(field_add:mom.ListaMensajes.mensajes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::MensajeTexto >&
ListaMensajes::mensajes() const {
  // @@protoc_insertion_point(field_list:mom.ListaMensajes.mensajes)
  return _impl_.mensajes_;
}

// -------------------------------------------------------------------

// ListaNombres

// repeated string nombres = 1;
inline int ListaNombres::_internal_nombres_size() const {
  return _impl_.nombres_.size();
}
inline int ListaNombres::nombres_size() const {
  return _internal_nombres_size();
}
inline void ListaNombres::clear_nombres() {
  _impl_.nombres_.Clear();
}
inline std::string* ListaNombres::add_nombres() {
  std::string* _s = _internal_add_nombres();
  // @@protoc_insertion_point(field_add_mutable:mom.ListaNombres.nombres)
  return _s;
}
inline const std::string& ListaNombres::_internal_nombres(int index) const {
  return _impl_.nombres_.Get(index);
}
inline const std::string& ListaNombres::nombres(int index) const {
  // @@protoc_insertion_point(field_get:mom.ListaNombres.nombres)
  return _internal_nombres(index);
}
inline std::string* ListaNombres::mutable_nombres(int index) {
  // @@protoc_insertion_point(field_mutable:mom.ListaNombres.nombres)
  return _impl_.nombres_.Mutable(index);
}
inline void ListaNombres::set_nombres(int index, const std::string& value) {
  _impl_.nombres_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mom.ListaNombres.nombres)
}
inline void ListaNombres::set_nombres(int index, std::string&& value) {
  _impl_.nombres_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mom.ListaNombres.nombres)
}
inline void ListaNombres::set_nombres(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.nombres_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mom.ListaNombres.nombres)
}
inline void ListaNombres::set_nombres(int index, const char* value, size_t size) {
  _impl_.nombres_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mom.ListaNombres.nombres)
}
inline std::string* ListaNombres::_internal_add_nombres() {
  return _impl_.nombres_.Add();
}
inline void ListaNombres::add_nombres(const std::string& value) {
  _impl_.nombres_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mom.ListaNombres.nombres)
}
inline void ListaNombres::add_nombres(std::string&& value) {
  _impl_.nombres_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mom.ListaNombres.nombres)
}
inline void ListaNombres::add_nombres(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.nombres_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mom.ListaNombres.nombres)
}
inline void ListaNombres::add_nombres(const char* value, size_t size) {
  _impl_.nombres_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mom.ListaNombres.nombres)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListaNombres::nombres() const {
  // @@protoc_insertion_point(field_list:mom.ListaNombres.nombres)
  return _impl_.nombres_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListaNombres::mutable_nombres() {
  // @@protoc_insertion_point(field_mutable_list:mom.ListaNombres.nombres)
  return &_impl_.nombres_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mom

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mom_2eproto
